# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-03-11 15:03
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('snakr', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='LongURLs',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name=b'unique 64-bit integer binary hash value of the long URL')),
                ('longurl', models.CharField(max_length=4096, validators=[django.core.validators.URLValidator()], verbose_name=b'encoded, quoted version of the submitted long URL')),
                ('created_on', models.DateTimeField(auto_now=True, verbose_name=b'datetime that the long URL was first submitted for shortening')),
                ('originally_encoded', models.CharField(choices=[(b'Y', b'Yes'), (b'N', b'No')], max_length=1, verbose_name=b'Y=the long URL was encoded when submitted; N=otherwise')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ShortURLs',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name=b'unique 64-bit integer binary hash value of the short URL')),
                ('longurl_id', models.BigIntegerField(unique=True, verbose_name=b'unique 64-bit integer binary hash value of the long URL redirected to by the short URL')),
                ('shorturl', models.CharField(max_length=40, validators=[django.core.validators.URLValidator()], verbose_name=b'unencoded, unquoted version of the short URL generated')),
                ('shorturl_path_size', models.SmallIntegerField(verbose_name=b'value of secure.SHORTURL_PATH_SIZE when short URL was generated')),
                ('created_on', models.DateTimeField(auto_now=True, verbose_name=b'datetime that the short URL was first generated')),
                ('is_active', models.CharField(choices=[(b'Y', b'Yes'), (b'N', b'No')], max_length=1, verbose_name=b'Y=The short URL redirects to the long URL; N=The short URL generates a 404 error')),
                ('compression_ratio', models.DecimalField(decimal_places=2, max_digits=10, verbose_name=b'ratio of compression achived long vs short')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CityLog',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name=b'unique 64-bit integer binary hash value of the city of origin of the event, if any')),
                ('city', models.CharField(max_length=100, verbose_name=b'The city of origin of the event, if any.')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CountryLog',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name=b'unique 64-bit integer binary hash value of the country of origin of the event, if any')),
                ('country', models.CharField(max_length=100, verbose_name=b'The country of origin of the event, if any.')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name=b'unique 64-bit integer autoincrement; gives order of events (200s, 302s, 400s, 404s, 500s...) as they occurred')),
                ('logged_on', models.DateTimeField(auto_now=True, verbose_name=b'datetime that the event was inserted into the table')),
                ('event_type', models.CharField(choices=[(b'I', b'Information'), (b'L', b'New Long URL Submitted'), (b'S', b'Short URL 302'), (b'R', b'Existing Long URL Resubmitted'), (b'X', b'Exception'), (b'E', b'Error'), (b'W', b'Warning'), (b'D', b'Debug')], max_length=1, verbose_name=b'Type of event logged. See models.Events.ENTRY_TYPE for enumeration details.')),
                ('http_status_code', models.IntegerField(verbose_name=b'the HTTP status code, if any, on the event, e.g. 200, 302, 404, etc.')),
                ('message', models.CharField(max_length=8192, verbose_name=b'Human-readable text message about the event, if any.')),
                ('longurl_id', models.BigIntegerField(verbose_name=b'unique 64-bit integer binary hash value of the long URL redirected to by the short URL associated with the event, if any')),
                ('shorturl_id', models.BigIntegerField(verbose_name=b'unique 64-bit integer binary hash value of the short URL associated with the event, if any')),
                ('ip_id', models.BigIntegerField(verbose_name=b'unique 64-bit integer binary hash value of the IP address origin of the event, if any')),
                ('lat', models.DecimalField(decimal_places=8, max_digits=10, verbose_name=b'Latitude coordinate of the origin of the event, if any')),
                ('lng', models.DecimalField(decimal_places=8, max_digits=11, verbose_name=b'Longitude coordinate of the origin of the event, if any')),
                ('city_id', models.BigIntegerField(verbose_name=b'unique 64-bit integer binary hash value of the city of origin of the event, if any')),
                ('country_id', models.BigIntegerField(verbose_name=b'unique 64-bit integer binary hash value of the country of origin of the event, if any')),
                ('host_id', models.BigIntegerField(verbose_name=b'unique 64-bit integer binary hash value of the HTPP_HOST value in the event, if any')),
                ('useragent_id', models.BigIntegerField(verbose_name=b'unique 64-bit integer binary hash value of the HTPP_USER_AGENT value in the event, if any')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='HostLog',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name=b'unique 64-bit integer binary hash value of the HTPP_HOST value in the event, if any')),
                ('host', models.CharField(max_length=253, verbose_name=b'The HTTP_HOST value in the event, if any.')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='IPLog',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name=b'unique 64-bit integer binary hash value of the IPv4 or IPv6 of the event, if any')),
                ('ip', models.CharField(max_length=45, verbose_name=b'The IPv4 or IPv6 address of the event, if any.')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserAgentLog',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False, verbose_name=b'unique 64-bit integer binary hash value of the HTPP_USER_AGENT value in the event, if any')),
                ('useragent', models.CharField(max_length=8192, verbose_name=b'The HTTP_USER_AGENT value in the event, if any.')),
            ],
            options={
                'managed': True,
            },
        ),
    ]
